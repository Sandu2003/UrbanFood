DROP TABLE Customer;
DROP TABLE Supplier;
DROP TABLE Product;
DROP TABLE Orders;
DROP TABLE OrderItem;
DROP TABLE Payment;
DROP TABLE Delivery;
DROP TABLE Reviews;

-- table for customer.......
CREATE TABLE Customer(
    customer_id NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    first_name VARCHAR2(100) NOT NULL,
    last_name VARCHAR2(100) NOT NULL,
    phone VARCHAR2(13) NOT NULL,
    email VARCHAR2(100) UNIQUE,
    address1 VARCHAR2(500) NOT NULL,
    address2 VARCHAR2(500),
    zip VARCHAR2(10),
    username VARCHAR2(100) UNIQUE NOT NULL,
    password VARCHAR2(100) NOT NULL
);

ALTER TABLE Customer ADD (username VARCHAR2(100) UNIQUE NOT NULL, password VARCHAR2(100)NOT NULL);
-- Table for the supplier........
CREATE TABLE Supplier(
    supplier_id NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    first_name VARCHAR2(100) NOT NULL,
    last_name VARCHAR2(100) NOT NULL,
    phone VARCHAR2(13) NOT NULL,
    email VARCHAR2(100) UNIQUE,
    address1 VARCHAR2(500) NOT NULL,
    zip VARCHAR2(10),
    username VARCHAR2(100) UNIQUE NOT NULL,
    password VARCHAR2(100) NOT NULL
);

-- Table for the Product.........
CREATE TABLE Product(
    product_id NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    category VARCHAR2(50),
    description VARCHAR2(500),
    price DECIMAL(10,2) NOT NULL,
    quantity NUMBER NOT NULL,
    supplier_id NUMBER,
    CONSTRAINT supplier_fk FOREIGN KEY (supplier_id) REFERENCES Supplier(supplier_id)
);
SELECT * FROM PRODUCT;
SELECT * FROM Supplier;

-- Table for the Orders..........
CREATE TABLE Orders(
    order_id NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    customer_id NUMBER,
    order_date DATE DEFAULT SYSDATE,
    status VARCHAR2(20) DEFAULT 'PENDING',
    total_amount DECIMAL(10,2),
    CONSTRAINT customer_fk FOREIGN KEY (customer_id) REFERENCES Customer(customer_id)
);
-- Table for the orderItem.........
CREATE TABLE OrderItem(
    orderItem_id NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    order_id NUMBER,
    product_id NUMBER,
    quantity NUMBER NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    CONSTRAINT order_fk FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    CONSTRAINT product_fk FOREIGN KEY (product_id) REFERENCES Product(product_id)
);
-- Table for the Payment............
CREATE TABLE Payment(
    payment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER,
    payment_date DATE DEFAULT SYSDATE,
    payment_method VARCHAR2(50) NOT NULL,
    amount NUMBER(10, 2),
    CONSTRAINT orderPayment_fk FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);
-- Table for the delivary..........
CREATE TABLE Delivery(
    delivery_id NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    order_id NUMBER,
    delivery_status VARCHAR2(50) DEFAULT 'NOT SHIPPED',
    delivery_date DATE,
    CONSTRAINT deliveryOrder_fk FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);
-- Table for Reviews...............
CREATE TABLE Reviews(
    review_id NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    customer_id NUMBER,
    product_id NUMBER,
    rating NUMBER,
    comment VARCHAR2(500),
    CONSTRAINT reviewCustomer_fk FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
    CONSTRAINT reviewProduct_fk FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

-- Table for Cart......................
CREATE TABLE Cart (
    cart_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    customer_username VARCHAR2(100),
    product_id NUMBER,
    quantity NUMBER,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

----------- TODO: PROCEDURES.............................

----------------------------------------------------------------------Place order..............
CREATE OR REPLACE PROCEDURE place_Order(
    b_product_ids IN SYS.ODCINUMBERLIST,
    b_quantities IN SYS.ODCINUMBERLIST,
    b_customer_id IN NUMBER
)
AS
    v_price Product.PRICE%TYPE;
    v_order_id Orders.order_id%TYPE;
    v_total Orders.total_amount%TYPE := 0;

BEGIN
    -- insert the data into order database...
    INSERT INTO Orders(customer_id, order_date, status, total_amount) VALUES (b_customer_id, SYSDATE, 'PENDING', 0) 
    RETURNING order_id INTO v_order_id;

    -- LOOP throughts products 
    FOR i IN 1 .. b_product_ids.COUNT LOOP
        -- get the price of the product...
        SELECT price INTO v_price FROM Product WHERE product_id = b_product_ids(i);

        -- insert the item it to orderItems Table...
        INSERT INTO OrderItem(order_id, product_id, quantity, price) VALUES 
        (v_order_id, b_product_ids(i), b_quantities(i), v_price);

        v_total := v_total + (v_price * b_quantities(i));
    END LOOP;
    -- update the total in the order.........
    UPDATE Orders SET total_amount = v_total WHERE order_id = v_order_id;
    COMMIT;
END;


------------------------------------------------------------------ Make a payment............................
CREATE OR REPLACE PROCEDURE Make_Payment(
    b_order_id NUMBER,
    b_paymentMethod Payment.payment_method%TYPE
)AS
    v_amount Orders.total_amount%TYPE;
BEGIN
    -- get the amount......
    SELECT total_amount INTO v_amount FROM Orders WHERE order_id = b_order_id;

    -- insert into the payment method.......
    INSERT INTO Payment (order_id, payment_date, payment_method, amount) VALUES (b_order_id, SYSDATE, b_paymentMethod, v_amount);

    -- update the status of the order...
    UPDATE Orders SET status = 'PAID' WHERE order_id = b_order_id;
    COMMIT;
END;


------------------------------------------------------------------Make order as delivered........................
CREATE OR REPLACE PROCEDURE Delivery_Complete(
    b_order_id Orders.order_id%TYPE
)AS
BEGIN
    -- make the devivery complete.......
    UPDATE Delivery SET delivery_status = 'COMPLETE' , delivery_date = SYSDATE WHERE order_id = b_order_id;
    COMMIT;
END;

------------------------------------------------MAke order stating to delivered.............
CREATE OR REPLACE PROCEDURE Delivering(
    b_order_id Orders.order_id%TYPE
)AS
BEGIN
    -- insert intp database........
    INSERT INTO Delivery (order_id , delivery_status, delivery_date) VALUES(b_order_id, 'NOT SHIPPED', SYSDATE);
    COMMIT;
END;



------------------------------------Validate Login.........................
CREATE OR REPLACE PROCEDURE validate_login(
    b_username IN VARCHAR2,
    b_password IN VARCHAR2,
    b_result OUT VARCHAR2
)AS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count FROM customer WHERE username = b_username AND password = b_password;

    IF v_count = 1 THEN
        b_result := 'SUCCESS';
    ELSE
        b_result := 'FAILED';
    END IF;
END;


-------------------------------------------------customer registration.....................................
CREATE OR REPLACE PROCEDURE register_customer(
    b_first_name IN VARCHAR2,
    b_last_name IN VARCHAR2, 
    b_phone IN VARCHAR2, 
    b_email IN VARCHAR2, 
    b_address1 IN VARCHAR2, 
    b_address2 IN VARCHAR2, 
    b_zip IN VARCHAR2,
    b_username IN VARCHAR2,
    b_password IN VARCHAR2,
    b_status OUT VARCHAR2
)AS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count FROM Customer WHERE username = b_username;
    IF v_count > 0 THEN
        b_status := 'USERNAME_EXISTS';
        RETURN;
    END IF;

    INSERT INTO Customer (first_name, last_name, phone, email, address1, address2, zip, username, password)
    VALUES(b_first_name, b_last_name, b_phone, b_email, b_address1, b_address2, b_zip, b_username, b_password);
    b_status := 'SUCCESS';
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN b_status := 'FAILED';
END;


------------------------------- Fetch product...............
CREATE OR REPLACE PROCEDURE get_all_products(b_cursor OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN b_cursor FOR
    SELECT p.product_id, p.name, p.category, p.description, p.price, p.quantity, s.first_name || ' ' || s.last_name AS supplier_name
    FROM Product p LEFT JOIN Supplier s ON p.SUPPLIER_ID = s.SUPPLIER_ID;
END;

--------------------------- Add to cart--------------
CREATE OR REPLACE PROCEDURE add_to_cart(
    b_username IN VARCHAR2,
    b_product_id IN NUMBER,
    b_quantity IN NUMBER
)AS
    v_quantity NUMBER;
BEGIN
    SELECT quantity INTO v_quantity FROM Product WHERE product_id = b_product_id;
    IF v_quantity >= b_quantity THEN
        INSERT INTO Cart(customer_username, product_id, quantity) VALUES (b_username, b_product_id, b_quantity);
        UPDATE Product SET quantity = quantity - b_quantity WHERE product_id = b_product_id;
        COMMIT;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient Stock available');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Product not found');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'An unexpected error occured');
END;


---------------------------- get cart items.....................
CREATE OR REPLACE 