CREATE TABLE Suppliers (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255) NOT NULL,
    email VARCHAR2(255) NOT NULL UNIQUE,
    password VARCHAR2(255) NOT NULL,
    businessName VARCHAR2(255) NOT NULL,
    businessType VARCHAR2(255) NOT NULL,
    contact VARCHAR2(15) NOT NULL,
    address CLOB NOT NULL
);

CREATE TABLE buyers (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    email VARCHAR2(100) UNIQUE NOT NULL,
    password VARCHAR2(255) NOT NULL,
    address VARCHAR2(255),
    contact VARCHAR2(20) UNIQUE
);


-- Drop tables to avoid conflicts
DROP TABLE Payments CASCADE CONSTRAINTS;    
DROP TABLE Buyers CASCADE CONSTRAINTS;
DROP TABLE Suppliers CASCADE CONSTRAINTS;
DROP TABLE Products CASCADE CONSTRAINTS;
DROP TABLE Orders CASCADE CONSTRAINTS;

CREATE TABLE products (
    product_id NUMBER PRIMARY KEY,
    product_name VARCHAR2(100),
    description VARCHAR2(255),
    image_path VARCHAR2(255),
    category VARCHAR2(50),
    price NUMBER(10, 2),
    stock_quantity NUMBER
);


CREATE TABLE ORDERS (
    ORDER_ID NUMBER PRIMARY KEY,
    EMAIL VARCHAR2(100),
    ORDER_DATE DATE,
    STATUS VARCHAR2(50)
);

CREATE TABLE order_details (
    ID INT GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    OrderID INT NOT NULL,
    ProductID INT NOT NULL,
    Quantity INT NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE
);
ALTER TABLE order_details ADD CONSTRAINT fk_product FOREIGN KEY (ProductID) 
REFERENCES Products(ProductID) ON DELETE CASCADE;

CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT NOT NULL,
    PaymentDate DATE,
    Amount DECIMAL(10, 2),
    PaymentMethod VARCHAR(50),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE
);

CREATE TABLE Deliveries (
    DeliveryID INT PRIMARY KEY,
    OrderID INT NOT NULL,
    DeliveryDate DATE,
    DeliveryStatus VARCHAR(50),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE
);

CREATE TABLE cart (
    ID INT GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    ProductID INT NOT NULL,
    Quantity INT NOT NULL
);
ALTER TABLE cart ADD CONSTRAINT fk_cart_product FOREIGN KEY (ProductID)
REFERENCES Products(ProductID) ON DELETE CASCADE;

INSERT INTO products (product_id, product_name, description, image_path, category)
VALUES (1, 'Fresh Milk', 'Creamy and delicious milk', '../assets/milk.jpg', 'Dairy');

INSERT INTO products (product_id, product_name, description, image_path, category)
VALUES (2, 'Banana Bread', 'Moist and sweet homemade banana bread.', '../assets/banana_bread.jpg', 'Baked Goods');

-- Insert sample buyer
INSERT INTO BUYERS (ID, NAME, EMAIL, PASSWORD, ADDRESS, CONTACT) VALUES
(1, 'John Doe', 'buyer@example.com', 'password123', '123 Main St', '123-456-7890');

-- Insert sample orders
INSERT INTO ORDERS (ORDER_ID, EMAIL, ORDER_DATE, STATUS) VALUES
(1, 'buyer@example.com', SYSDATE, 'Shipped'),
(2, 'buyer@example.com', SYSDATE, 'Delivered');


-- 1. Drop Existing Procedure
DROP PROCEDURE C##urbanfood_user.REGISTER_BUYER;

-- 2. Drop Existing Sequence
DROP SEQUENCE C##urbanfood_user.BUYERS_SEQ;

-- 3. Drop Existing Table (If Exists)
DROP TABLE C##urbanfood_user.BUYERS CASCADE CONSTRAINTS;

-- 4. Drop Existing User Privileges
REVOKE EXECUTE ON C##urbanfood_user.REGISTER_BUYER FROM C##urbanfood_user;
REVOKE INSERT ON C##urbanfood_user.BUYERS FROM C##urbanfood_user;
REVOKE SELECT, INSERT, UPDATE, DELETE ON C##urbanfood_user.BUYERS FROM C##urbanfood_user;

-- 5. Recreate the BUYERS Table
CREATE TABLE C##urbanfood_user.BUYERS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    email VARCHAR2(100) UNIQUE NOT NULL,
    password VARCHAR2(255) NOT NULL,
    address VARCHAR2(255),
    contact VARCHAR2(20) UNIQUE
);

-- 6. Recreate the Sequence
CREATE SEQUENCE C##urbanfood_user.BUYERS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;

-- 7. Recreate the REGISTER_BUYER Procedure
CREATE OR REPLACE PROCEDURE C##urbanfood_user.REGISTER_BUYER (
    p_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_address IN VARCHAR2,
    p_contact IN VARCHAR2
)
AS
BEGIN
    INSERT INTO C##urbanfood_user.BUYERS (id, name, email, password, address, contact)
    VALUES (C##urbanfood_user.BUYERS_SEQ.NEXTVAL, p_name, p_email, p_password, p_address, p_contact);
    COMMIT;
END REGISTER_BUYER;
/

-- 8. Grant Privileges to C##urbanfood_user
GRANT EXECUTE ON C##urbanfood_user.REGISTER_BUYER TO C##urbanfood_user;
GRANT SELECT, INSERT, UPDATE, DELETE ON C##urbanfood_user.BUYERS TO C##urbanfood_user;

-- 9. Test the Procedure
BEGIN
   C##urbanfood_user.REGISTER_BUYER(
      p_name    => 'John Doe', 
      p_email   => 'johndoe@example.com', 
      p_password => 'securepassword123', 
      p_address => '123 Main St, City', 
      p_contact => '1234567890'
   );
END;
/

-- 10. Verify the Data
SELECT * FROM C##urbanfood_user.BUYERS WHERE email = 'johndoe@example.com';

SELECT USER FROM dual;
