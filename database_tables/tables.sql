CREATE TABLE Suppliers (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255) NOT NULL,
    email VARCHAR2(255) NOT NULL UNIQUE,
    password VARCHAR2(255) NOT NULL,
    businessName VARCHAR2(255) NOT NULL,
    businessType VARCHAR2(255) NOT NULL,
    contact VARCHAR2(15) NOT NULL,
    address CLOB NOT NULL
);

CREATE TABLE cart (
    cart_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,   -- Auto-generated unique cart ID
    buyer_id NUMBER NOT NULL,                                      -- Foreign key to the buyers table
    product_id NUMBER NOT NULL,                                    -- Foreign key to the products table
    quantity NUMBER DEFAULT 1,                                     -- Quantity of the product
    status VARCHAR2(50) DEFAULT 'active',                          -- Status of the cart (active, checked-out)
    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                 -- Date and time the product was added to the cart
    FOREIGN KEY (buyer_id) REFERENCES buyers(id) ON DELETE CASCADE, -- Foreign key referencing buyers table
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE -- Foreign key referencing products table
);


-- Drop tables to avoid conflicts
DROP TABLE Payments CASCADE CONSTRAINTS;    
DROP TABLE Buyers CASCADE CONSTRAINTS;
DROP TABLE Suppliers CASCADE CONSTRAINTS;
DROP TABLE Products CASCADE CONSTRAINTS;
DROP TABLE Orders CASCADE CONSTRAINTS;
DROP TABLE order_details CASCADE CONSTRAINTS;
DROP TABLE CART CASCADE CONSTRAINTS;
CREATE TABLE orders (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    delivery_method VARCHAR(255),
    payment_method VARCHAR(255),
    total_amount DECIMAL(10, 2),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE order_items (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id INT,
    product VARCHAR(255),
    quantity INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(id)
);

CREATE TABLE products (
    product_id NUMBER PRIMARY KEY,
    product_name VARCHAR2(100),
    description VARCHAR2(255),
    image_path VARCHAR2(255),
    category VARCHAR2(50),
    price NUMBER(10, 2),
    stock_quantity NUMBER
);
-- Ensure the sequence exists before inserting
INSERT INTO products (product_id, product_name, description, image_path, category, price, stock_quantity)
VALUES (products_seq.NEXTVAL, 'Product Name', 'Description of the product', 'path/to/image.jpg', 'Category A', 100.00, 50);
CREATE SEQUENCE products_seq
START WITH 1
INCREMENT BY 1
NOCACHE;
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER product_id_trigger
BEFORE INSERT ON products
FOR EACH ROW
BEGIN
   SELECT product_seq.NEXTVAL
   INTO :NEW.product_id
   FROM dual;
END;
/
SELECT product_seq.NEXTVAL FROM dual;


CREATE TABLE ORDERS (
    ORDER_ID NUMBER PRIMARY KEY,
    EMAIL VARCHAR2(100),
    ORDER_DATE DATE,
    STATUS VARCHAR2(50)
);

CREATE TABLE order_details (
    ID INT GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 PRIMARY KEY,
    OrderID INT NOT NULL,
    ProductID INT NOT NULL,
    Quantity INT NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE
);
ALTER TABLE order_details ADD CONSTRAINT fk_product FOREIGN KEY (ProductID) 
REFERENCES Products(ProductID) ON DELETE CASCADE;

CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT NOT NULL,
    PaymentDate DATE,
    Amount DECIMAL(10, 2),
    PaymentMethod VARCHAR(50),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE
);

CREATE TABLE Deliveries (
    DeliveryID INT PRIMARY KEY,
    OrderID INT NOT NULL,
    DeliveryDate DATE,
    DeliveryStatus VARCHAR(50),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE
);

-- Grant CREATE TABLE privilege to your user (replace "your_username" with your actual username)
GRANT CREATE TABLE TO system;

-- Grant REFERENCES privilege on the BUYERS and PRODUCTS tables
GRANT REFERENCES ON C##urbanfood_user.BUYERS TO system;
GRANT REFERENCES ON PRODUCTS TO system;


ALTER TABLE cart ADD CONSTRAINT fk_cart_product FOREIGN KEY (ProductID)
REFERENCES Products(ProductID) ON DELETE CASCADE;

INSERT INTO products (product_id, product_name, description, image_path, category)
VALUES (1, 'Fresh Milk', 'Creamy and delicious milk', '../assets/milk.jpg', 'Dairy');

INSERT INTO products (product_id, product_name, description, image_path, category)
VALUES (2, 'Banana Bread', 'Moist and sweet homemade banana bread.', '../assets/banana_bread.jpg', 'Baked Goods');

-- Insert sample buyer
INSERT INTO BUYERS (ID, NAME, EMAIL, PASSWORD, ADDRESS, CONTACT) VALUES
(1, 'John Doe', 'buyer@example.com', 'password123', '123 Main St', '123-456-7890');

-- Insert sample orders
INSERT INTO ORDERS (ORDER_ID, EMAIL, ORDER_DATE, STATUS) VALUES
(1, 'buyer@example.com', SYSDATE, 'Shipped'),
(2, 'buyer@example.com', SYSDATE, 'Delivered');


-- 1. Drop Existing Procedure
DROP PROCEDURE C##urbanfood_user.REGISTER_BUYER;

-- 2. Drop Existing Sequence
DROP SEQUENCE C##urbanfood_user.BUYERS_SEQ;

-- 3. Drop Existing Table (If Exists)
DROP TABLE C##urbanfood_user.BUYERS CASCADE CONSTRAINTS;

-- 4. Drop Existing User Privileges
REVOKE EXECUTE ON C##urbanfood_user.REGISTER_BUYER FROM C##urbanfood_user;
REVOKE INSERT ON C##urbanfood_user.BUYERS FROM C##urbanfood_user;
REVOKE SELECT, INSERT, UPDATE, DELETE ON C##urbanfood_user.BUYERS FROM C##urbanfood_user;

-- 5. Recreate the BUYERS Table
CREATE TABLE C##urbanfood_user.BUYERS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    email VARCHAR2(100) UNIQUE NOT NULL,
    password VARCHAR2(255) NOT NULL,
    address VARCHAR2(255),
    contact VARCHAR2(20) UNIQUE
);

-- 6. Recreate the Sequence
CREATE SEQUENCE C##urbanfood_user.BUYERS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;

-- 7. Recreate the REGISTER_BUYER Procedure
CREATE OR REPLACE PROCEDURE C##urbanfood_user.REGISTER_BUYER (
    p_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_address IN VARCHAR2,
    p_contact IN VARCHAR2
)
AS
BEGIN
    INSERT INTO C##urbanfood_user.BUYERS (id, name, email, password, address, contact)
    VALUES (C##urbanfood_user.BUYERS_SEQ.NEXTVAL, p_name, p_email, p_password, p_address, p_contact);
    COMMIT;
END REGISTER_BUYER;
/

-- 8. Grant Privileges to C##urbanfood_user
GRANT EXECUTE ON C##urbanfood_user.REGISTER_BUYER TO C##urbanfood_user;
GRANT SELECT, INSERT, UPDATE, DELETE ON C##urbanfood_user.BUYERS TO C##urbanfood_user;

-- 9. Test the Procedure
BEGIN
   C##urbanfood_user.REGISTER_BUYER(
      p_name    => 'John Doe', 
      p_email   => 'johndoe@example.com', 
      p_password => 'securepassword123', 
      p_address => '123 Main St, City', 
      p_contact => '1234567890'
   );
END;
/

-- 10. Verify the Data
SELECT * FROM C##urbanfood_user.BUYERS WHERE email = 'johndoe@example.com';

SELECT USER FROM dual;
DESCRIBE products;


SELECT * FROM products;
-- Insert products into Fruits category
INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Apple', 'Fresh red apple', 'images/apple.jpg', 'Fruits', 1.50, 100);

INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Banana', 'Sweet ripe bananas', 'images/banana.jpg', 'Fruits', 0.75, 200);

INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Orange', 'Juicy orange', 'images/orange.jpg', 'Fruits', 1.20, 150);

-- Insert products into Vegetables category
INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Carrot', 'Fresh crunchy carrots', 'images/carrot.jpg', 'Vegetables', 2.00, 80);

INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Broccoli', 'Fresh green broccoli', 'images/broccoli.jpg', 'Vegetables', 2.50, 60);

INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Cucumber', 'Cool and crisp cucumber', 'images/cucumber.jpg', 'Vegetables', 1.80, 120);

-- Insert products into Dairy Products category
INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Milk', 'Fresh whole milk', 'images/milk.jpg', 'Dairy Products', 2.80, 50);

INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Cheese', 'Cheddar cheese', 'images/cheese.jpg', 'Dairy Products', 4.00, 30);

INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Butter', 'Creamy butter', 'images/butter.jpg', 'Dairy Products', 3.50, 40);

-- Insert products into Baked Goods category
INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Bread', 'Freshly baked bread', 'images/bread.jpg', 'Baked Goods', 1.00, 250);

INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Cake', 'Delicious chocolate cake', 'images/cake.jpg', 'Baked Goods', 5.00, 100);

INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Pastry', 'Buttery pastries', 'images/pastry.jpg', 'Baked Goods', 2.50, 150);

-- Insert products into Handmade Crafts category
INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Handmade Vase', 'Beautiful handcrafted vase', 'images/vase.jpg', 'Handmade Crafts', 10.00, 25);

INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Wooden Sculpture', 'Intricate wooden sculpture', 'images/sculpture.jpg', 'Handmade Crafts', 15.00, 40);

INSERT INTO products (product_name, description, image_path, category, price, stock_quantity)
VALUES ('Knitted Blanket', 'Cozy knitted blanket', 'images/blanket.jpg', 'Handmade Crafts', 25.00, 10);


-- Removed duplicate CREATE TABLE cart statement to avoid conflicts.
SELECT * FROM cart WHERE buyer_id = 1;
SELECT * FROM orders;

CREATE TABLE cart (
    cart_id NUMBER PRIMARY KEY,
    product_id NUMBER NOT NULL,
    quantity NUMBER NOT NULL,
    status VARCHAR2(50) DEFAULT 'active',
    added_on DATE DEFAULT SYSDATE,
    CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES products(product_id)
);
DESC cart;

CREATE SEQUENCE cart_seq START WITH 1 INCREMENT BY 1 NOCACHE;
